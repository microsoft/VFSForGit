name: VFS for Git

on:
  pull_request:
    branches: [ master, releases/shipped ]
  push:
    branches: [ master, releases/shipped ]
  workflow_dispatch:
    inputs:
      git_version:
        description: 'Microsoft Git version tag to include in the build (leave empty for default)'
        required: false
        type: string

env:
  GIT_VERSION: ${{ github.event.inputs.git_version || 'v2.50.1.vfs.0.1' }}

jobs:
  validate:
    runs-on: windows-2025
    name: Validation
    outputs:
      result: ${{ steps.check.outputs.result }}

    steps:
    - name: look for prior successful runs
      id: check
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          /*
            * Look for any successful run for the same commit. No need to run it again, right?
            */
            try {
            // Figure out workflow ID, commit and tree
            const { data: run } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            const workflow_id = run.workflow_id;
            const head_sha = run.head_sha;
            const tree_id = run.head_commit.tree_id;

            // See whether there is a successful run for that commit
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 500,
              workflow_id,
              status: 'success',,
            });
            for (const run of runs.workflow_runs) {
              if (head_sha === run.head_sha) return true
            }
            return false
          } catch (e) {
            core.warning(e);
          }

    - name: Checkout source
      uses: actions/checkout@v5

    - name: Validate Microsoft Git version
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        & "$env:GITHUB_WORKSPACE\.github\workflows\scripts\validate_release.ps1" `
          -Repository microsoft/git `
          -Tag $env:GIT_VERSION && `
        Write-Host ::notice title=Validation::Using microsoft/git version $env:GIT_VERSION

  build:
    runs-on: windows-2025
    name: Build and Unit Test
    needs: validate

    strategy:
      if: needs.validate.outputs.skip != 'true'
      matrix:
        configuration: [ Debug, Release ]
      fail-fast: false

    steps:
    - name: Checkout source
      uses: actions/checkout@v5
      with:
        path: src

    - name: Install .NET SDK
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: 8.0.413

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2.0.0

    - name: Build VFS for Git
      shell: cmd
      run: src\scripts\Build.bat ${{ matrix.configuration }}

    - name: Run unit tests
      shell: cmd
      run: src\scripts\RunUnitTests.bat ${{ matrix.configuration }}

    - name: Create build artifacts
      shell: cmd
      run: src\scripts\CreateBuildArtifacts.bat ${{ matrix.configuration }} artifacts

    - name: Download microsoft/git installers
      shell: cmd
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release download %GIT_VERSION% --repo microsoft/git --pattern "Git*.exe" --dir artifacts\GVFS.Installers

    - name: Upload functional tests drop
      uses: actions/upload-artifact@v4
      with:
        name: FunctionalTests_${{ matrix.configuration }}
        path: artifacts\GVFS.FunctionalTests

    - name: Upload FastFetch drop
      uses: actions/upload-artifact@v4
      with:
        name: FastFetch_${{ matrix.configuration }}
        path: artifacts\FastFetch

    - name: Upload installers
      uses: actions/upload-artifact@v4
      with:
        name: Installers_${{ matrix.configuration }}
        path: artifacts\GVFS.Installers

  functional_test:
    runs-on: ${{ matrix.architecture == 'arm64' && 'windows-11-arm' || 'windows-2025' }}
    name: Functional Tests
    needs: [validate, build]

    strategy:
      if: needs.validate.outputs.skip != 'true'
      matrix:
        configuration: [ Debug, Release ]
        architecture: [ x86_64, arm64 ]
      fail-fast: false # most failures are flaky tests, no need to stop the other jobs from succeeding

    steps:
    - name: Download installers
      uses: actions/download-artifact@v5
      with:
        name: Installers_${{ matrix.configuration }}
        path: install

    - name: Download functional tests drop
      uses: actions/download-artifact@v5
      with:
        name: FunctionalTests_${{ matrix.configuration }}
        path: ft

    - name: ProjFS details (pre-install)
      shell: cmd
      run: install\info.bat

    - name: Install product
      shell: cmd
      run: install\install.bat

    - name: ProjFS details (post-install)
      shell: cmd
      run: install\info.bat

    - name: Upload installation logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: InstallationLogs_${{ matrix.configuration }}_${{ matrix.architecture }}
        path: install\logs

    - name: Run functional tests
      shell: cmd
      run: |
        SET PATH=C:\Program Files\VFS for Git;%PATH%
        SET GIT_TRACE2_PERF=C:\temp\git-trace2.log
        ft\GVFS.FunctionalTests.exe /result:TestResult.xml --ci

    - name: Upload functional test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: FunctionalTests_Results_${{ matrix.configuration }}_${{ matrix.architecture }}
        path: TestResult.xml

    - name: Upload Git trace2 output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: GitTrace2_${{ matrix.configuration }}_${{ matrix.architecture }}
        path: C:\temp\git-trace2.log

    - name: ProjFS details (post-test)
      if: always()
      shell: cmd
      run: install\info.bat
